apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: "${ARGOCD_ENV_dbdeploy_name_prefix}-backups"
  namespace: ${ARGOCD_ENV_namespace}
spec:
  bucketName: "${ARGOCD_ENV_dbdeploy_name_prefix}-backups"
  storageClassName: ceph-bucket
  additionalConfig:
    # maxObjects: "1000000"
    maxSize: "10Gi"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: ${ARGOCD_ENV_namespace}
  name: "${ARGOCD_ENV_dbdeploy_name_prefix}-secret-creator"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ${ARGOCD_ENV_namespace}
  name: "${ARGOCD_ENV_dbdeploy_name_prefix}-secret-role"
rules:
  - apiGroups: [""]
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - authorization.k8s.io
    resources:
      - selfsubjectrulesreviews
    verbs:
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "${ARGOCD_ENV_dbdeploy_name_prefix}-secret-creator"
  namespace: ${ARGOCD_ENV_namespace}
subjects:
  - kind: ServiceAccount
    name: "${ARGOCD_ENV_dbdeploy_name_prefix}-secret-creator"
roleRef:
  kind: Role
  name: "${ARGOCD_ENV_dbdeploy_name_prefix}-secret-role"
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: "${ARGOCD_ENV_dbdeploy_name_prefix}-k8s-secret-store"
  namespace: ${ARGOCD_ENV_namespace}
spec:
  provider:
    kubernetes:
      auth:
        serviceAccount:
          name: "${ARGOCD_ENV_dbdeploy_name_prefix}-secret-creator"
      remoteNamespace: ${ARGOCD_ENV_namespace}
      server:
        caProvider:
          type: ConfigMap
          name: kube-root-ca.crt
          key: ca.crt
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: "${ARGOCD_ENV_dbdeploy_name_prefix}-pgbackrest-secret"
  namespace: ${ARGOCD_ENV_namespace}
spec:
  refreshInterval: 1m

  secretStoreRef:
    kind: SecretStore
    name: "${ARGOCD_ENV_dbdeploy_name_prefix}-k8s-secret-store"

  data:
    - secretKey: AWS_ACCESS_KEY_ID
      remoteRef:
        key: "${ARGOCD_ENV_dbdeploy_name_prefix}-backups"
        property: AWS_ACCESS_KEY_ID
    - secretKey: AWS_SECRET_ACCESS_KEY
      remoteRef:
        key: "${ARGOCD_ENV_dbdeploy_name_prefix}-backups"
        property: AWS_SECRET_ACCESS_KEY

  target:
    name: "${ARGOCD_ENV_dbdeploy_name_prefix}-pgbackrest-secret"
    creationPolicy: Owner
    template:
      data:
        s3.conf: |
          [global]
          repo1-s3-key={{.AWS_ACCESS_KEY_ID}}
          repo1-s3-key-secret={{.AWS_SECRET_ACCESS_KEY}}