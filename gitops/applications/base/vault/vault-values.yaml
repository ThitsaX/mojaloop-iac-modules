global:
   tlsDisable: false  
server:
  enabled: true
  dev:
    enabled: false
  extraVolumes:
    - type: configMap
      name: post-config
  readinessProbe:
    path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
  extraEnvironmentVars:
    VAULT_CACERT: /vault/userconfig/vault-ha-tls/ca.crt
    VAULT_TLSCERT: /vault/userconfig/vault-ha-tls/tls.crt
    VAULT_TLSKEY: /vault/userconfig/vault-ha-tls/tls.key
  volumes:
    - name: userconfig-vault-ha-tls
      secret:
        defaultMode: 420
        secretName: vault-internal-tls
  volumeMounts:
    - mountPath: /vault/userconfig/vault-ha-tls
      name: userconfig-vault-ha-tls
      readOnly: true
  ha:
    enabled: true
    raft:
      enabled: true
      setNodeId: true
      config: |
        ui = true
        listener "tcp" {
            tls_disable = 0
            address = "[::]:8200"
            cluster_address = "[::]:8201"
            tls_cert_file = "/vault/userconfig/vault-ha-tls/tls.crt"
            tls_key_file  = "/vault/userconfig/vault-ha-tls/tls.key"
            tls_client_ca_file = "/vault/userconfig/vault-ha-tls/ca.crt"
        }
        storage "raft" {
            path = "/vault/data"
            retry_join {
              leader_api_addr = "https://${ARGOCD_ENV_vault_app_name}-0.${ARGOCD_ENV_vault_app_name}-internal:8200"
              leader_ca_cert_file = "/vault/userconfig/vault-ha-tls/ca.crt"
              leader_client_cert_file = "/vault/userconfig/vault-ha-tls/tls.crt"
              leader_client_key_file = "/vault/userconfig/vault-ha-tls/tls.key"
            }
            retry_join {
              leader_api_addr = "https://${ARGOCD_ENV_vault_app_name}-1.${ARGOCD_ENV_vault_app_name}internal:8200"
              leader_ca_cert_file = "/vault/userconfig/vault-ha-tls/ca.crt"
              leader_client_cert_file = "/vault/userconfig/vault-ha-tls/tls.crt"
              leader_client_key_file = "/vault/userconfig/vault-ha-tls/tls.key"
            }
            retry_join {
              leader_api_addr = "https://${ARGOCD_ENV_vault_app_name}-2.${ARGOCD_ENV_vault_app_name}-internal:8200"
              leader_ca_cert_file = "/vault/userconfig/vault-ha-tls/ca.crt"
              leader_client_cert_file = "/vault/userconfig/vault-ha-tls/tls.crt"
              leader_client_key_file = "/vault/userconfig/vault-ha-tls/tls.key"
            }
        }
        disable_mlock = true
        service_registration "kubernetes" {}

  extraContainers:
    # - name: statsd-exporter
    #   image: prom/statsd-exporter:latest
    - name: init-sidecar
      image: ghcr.io/mojaloop/vault-utils:0.0.6
      command:
        [
          "sh",
          "-c",
          "cp /etc/vault/bootstrap.sh /tmp; chmod +x /tmp/bootstrap.sh; while true; do /tmp/bootstrap.sh; sleep 300; done",
        ]
      volumeMounts:
        - name: userconfig-post-config
          mountPath: /etc/vault/

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: class
                operator: NotIn
                values:
                  - vault
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            topologyKey: kubernetes.io/hostname
            labelSelector:
              matchLabels:
                app: vault
  ingress:
    enabled: false
  logLevel: ${ARGOCD_ENV_vault_log_level}

ui:
  enabled: true
injector:
  enabled: false
csi:
  enabled: false
