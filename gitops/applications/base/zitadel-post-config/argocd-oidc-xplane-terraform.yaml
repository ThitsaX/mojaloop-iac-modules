---
apiVersion: tf.upbound.io/v1beta1
kind: Workspace
metadata:
  name: zitadel-argocd-oidc-config
  namespace: ${ARGOCD_ENV_zitadel_namespace}
spec:
  forProvider:
    # Use any module source supported by terraform init -from-module.
    source: Remote
    module: git::https://github.com/mojaloop/iac-modules.git//terraform/config-params/ccnew-config/argocd-oidc?ref=${ARGOCD_ENV_terraform_modules_tag}
    # Variables can be specified inline as a list of key-value pairs or as an json object, or loaded from a ConfigMap or Secret.
    vars:
      - key: zitadel_fqdn
        value: zitadel.${ARGOCD_ENV_zitadel_dns_subdomain}
      - key: argocd_fqdn
        value: argocd.${ARGOCD_ENV_zitadel_dns_subdomain}
      - key: admin_rbac_group
        value: ${ARGOCD_ENV_argocd_admin_rbac_group}
      - key: user_rbac_group
        value: ${ARGOCD_ENV_argocd_user_rbac_group}

  # All Terraform outputs are written to the connection secret.
  providerConfigRef:
    name: zitadel-argocd-oidc-config
  publishConnectionDetailsTo:
    name: ${ARGOCD_ENV_argocd_oidc_secret}
    metadata:
      labels:
        app.kubernetes.io/part-of: argocd
      annotations:
        reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
        reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "${ARGOCD_ENV_argocd_namespace}"
        reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true" # Auto create reflection for matching namespaces
        reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "${ARGOCD_ENV_argocd_namespace}"
---
apiVersion: tf.upbound.io/v1beta1
kind: ProviderConfig
metadata:
  name: zitadel-argocd-oidc-config
  namespace: ${ARGOCD_ENV_zitadel_namespace}
spec:
  # Note that unlike most provider configs this one supports an array of
  # credentials. This is because each Terraform workspace uses a single
  # Crossplane provider config, but could use multiple Terraform providers each
  # with their own credentials.
  credentials:
    - filename: zitadel-admin-sa.json
      source: Secret
      secretRef:
        namespace: ${ARGOCD_ENV_zitadel_namespace}
        name: zitadel-admin-sa
        key: zitadel-admin-sa.json

  # This optional configuration block can be used to inject HCL into any
  # workspace that uses this provider config, for example to setup Terraform
  # providers.
  configuration: |
    terraform { 
        backend "kubernetes" {
          secret_suffix     = "providerconfig-zitadel-post-config"
          namespace         = "${ARGOCD_ENV_zitadel_namespace}"
          in_cluster_config = true
        }
        required_providers {
          zitadel = {
            source = "zitadel/zitadel"
            version = "${ARGOCD_ENV_tf_provider_version}"
          }
        }
    }

      provider "zitadel" {
          domain = "zitadel.${ARGOCD_ENV_zitadel_dns_subdomain}"
          jwt_profile_file = "$${path.module}/zitadel-admin-sa.json"
      }
