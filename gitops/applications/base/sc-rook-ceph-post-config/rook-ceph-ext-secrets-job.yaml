apiVersion: batch/v1
kind: Job
metadata:
  name: rook-ceph-external-secrets
  namespace: ${ARGOCD_ENV_rook_ceph_namespace}
spec:
  template:
    spec:
      restartPolicy: OnFailure
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: ceph-job-sa
      containers:
        - name: kubectl
          volumeMounts:
            - mountPath: /data
              name: shared-data
            - name: rgw-endpoint
              mountPath: /tmp/rgw-secret
              readOnly: true
          image: bitnami/kubectl:latest
          securityContext:
            runAsNonRoot: true
            runAsUser: 2016
            runAsGroup: 2016
            capabilities:
              drop: ["ALL"]
          command:
            - /bin/bash
            - -c
            - |
              # Additional env vars
              NAMESPACE="rook-ceph"
              KUBECTL="kubectl"
              RGW_ENDPOINT=$(cat /tmp/rgw-secret/RGW_EXTERNAL_IP)
              RGW_EXTERNAL_PORT=$(cat /tmp/rgw-secret/RGW_EXTERNAL_PORT)
              
              # Create rook-ceph-external namespace
              # if ! $KUBECTL get namespace "$NAMESPACE" &>/dev/null; then
              #   $KUBECTL \
              #   create \
              #   namespace \
              #   "$NAMESPACE"
              # else
              #   echo "Namespace $NAMESPACE already exists"
              # fi
              
              # Append other variables to /data/ceph_env and create secret
              if [ -s /data/ceph_env ]; then
                echo "export RGW_EXTERNAL_IP=$RGW_EXTERNAL_IP" >> /data/ceph_env
                kubectl create secret generic ceph-external-cluster-secret \
                  --namespace $NAMESPACE \
                  --from-file=config=/data/ceph_env --dry-run=client -o yaml | kubectl apply -f -
                echo "Secret created successfully!"
              else 
                echo "Error: /data/ceph_env is empty!"
                exit 1
              fi
      initContainers:
        - name: rook-ceph-secrets-generator
          image: quay.io/ceph/ceph:${ARGOCD_ENV_rook_ceph_image_version}
          command:
            - /bin/bash
            - -c
            - |
              # Replicate the script from toolbox.sh inline so the ceph image
              # can be run directly, instead of requiring the rook toolbox
              CEPH_CONFIG="/etc/ceph/ceph.conf"
              MON_CONFIG="/etc/rook/mon-endpoints"
              KEYRING_FILE="/etc/ceph/keyring"

              write_endpoints() {
                endpoints=$(cat ${MON_CONFIG})
                mon_endpoints=$(echo "${endpoints}" | sed 's/[a-z0-9_-]\+=//g')
                DATE=$(date)
                echo "$DATE writing mon endpoints to ${CEPH_CONFIG}: ${endpoints}"
                cat <<EOF > ${CEPH_CONFIG}
              [global]
              mon_host = ${mon_endpoints}

              [client.admin]
              keyring = ${KEYRING_FILE}
              EOF
              }

              ceph_secret=${ROOK_CEPH_SECRET}
              if [[ "$ceph_secret" == "" ]]; then
                ceph_secret=$(cat /var/lib/rook-ceph-mon/secret.keyring)
              fi

              cat <<EOF > ${KEYRING_FILE}
              [${ROOK_CEPH_USERNAME}]
              key = ${ceph_secret}
              EOF

              write_endpoints

              # Download export script
              curl -fsSL -o /data/create-external-cluster-resources.py \
                https://raw.githubusercontent.com/rook/rook/refs/heads/release-1.16/deploy/examples/create-external-cluster-resources.py

              # Prepare ceph for external use
              RGW_ENDPOINT=$(cat /tmp/rgw-secret/RGW_ENDPOINT)
              echo "Running create-external-cluster-resources.py..."
              python3 /data/create-external-cluster-resources.py \
                --rbd-data-pool-name ceph-blockpool \
                --rgw-endpoint $RGW_ENDPOINT \
                --cephfs-data-pool-name ceph-filesystem-data0 \
                --skip-monitoring-endpoint \
                --namespace rook-ceph-external --format bash > /data/ceph_env
          imagePullPolicy: IfNotPresent
          tty: true
          securityContext:
            runAsNonRoot: true
            runAsUser: 2016
            runAsGroup: 2016
            capabilities:
              drop: ["ALL"]
          env:
            - name: ROOK_CEPH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: rook-ceph-mon
                  key: ceph-username
          volumeMounts:
            - mountPath: /etc/ceph
              name: ceph-config
            - name: mon-endpoint-volume
              mountPath: /etc/rook
            - name: ceph-admin-secret
              mountPath: /var/lib/rook-ceph-mon
              readOnly: true
            - name: shared-data
              mountPath: /data
            - name: rgw-endpoint
              mountPath: /tmp/rgw-secret
              readOnly: true
      volumes:
        - name: ceph-admin-secret
          secret:
            secretName: rook-ceph-mon
            optional: false
            items:
              - key: ceph-secret
                path: secret.keyring
        - name: mon-endpoint-volume
          configMap:
            name: rook-ceph-mon-endpoints
            items:
              - key: data
                path: mon-endpoints
        - name: ceph-config
          emptyDir: {}
        - name: shared-data
          emptyDir: {}
        - name: rgw-endpoint
          secret:
            secretName: rgw-endpoint
      tolerations:
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 5