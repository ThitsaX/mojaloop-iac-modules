apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: secretsyncer
  labels:
    crossplane.io/xrd: xsecretsyncer.infitx.org
spec:
  compositeTypeRef:
    apiVersion: infitx.org/v1alpha1
    kind: XSecretSyncer
  mode: Pipeline
  pipeline:

    - step: kcl
      functionRef:
        name: function-kcl
      input:
        apiVersion: krm.kcl.dev/v1alpha1
        kind: KCLInput
        spec:
          source: |
            # Start of KCL function code
            # Read the XR and the OCDs
            oxr = option("params").oxr
            ocds = option("params").ocds
            
            spec = oxr.spec
            parameters = spec.parameters
            # Initialize the items list
            _items = []
            ## Adding resources
            _items += [
                {
                    apiVersion = "kubernetes.crossplane.io/v1alpha2"
                    kind = "Object"
                    metadata = {
                        name = "{}-ss".format(oxr.metadata.name)
                        annotations = {
                            "krm.kcl.dev/composition-resource-name": "source-secret"
                        }
                    }
                    spec = {
                        forProvider = {
                            manifest = {
                                apiVersion = "v1"
                                kind = "Secret"
                                metadata = {
                                    name = parameters.source.name
                                    namespace = parameters.source.namespace
                                }
                            }
                        }
                        managementPolicies = ["Observe"]
                        providerConfigRef = {
                            name = spec.providerConfigsRef.sourceK8sProviderName
                        }
                    }
                }
                {
                    apiVersion = "kubernetes.crossplane.io/v1alpha2"
                    kind = "Object"
                    metadata = {
                        name = "{}-ds".format(oxr.metadata.name)
                        annotations = {
                            "krm.kcl.dev/composition-resource-name": "destination-secret"
                        }
                    }
                    spec = {
                        forProvider = {
                            manifest = {
                                apiVersion = "v1"
                                kind = "Secret"
                                metadata = {
                                    name = parameters.destination.name
                                    namespace = parameters.destination.namespace
                                }
                                # Get data and type from the source secret's status
                                data = ocds["source-secret"]?.Resource?.status?.atProvider?.manifest?.data
                                type = ocds["source-secret"]?.Resource?.status?.atProvider?.manifest?.type
                            }
                        }
                        managementPolicies = spec.managementPolicies
                        providerConfigRef = {
                            name = spec.providerConfigsRef.destinationK8sProviderName
                        }
                    }
                }
            ]
            
            dxr = {
                **oxr
            }
            
            items = _items + [dxr]
            # End of KCL function code

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: function-auto-ready
